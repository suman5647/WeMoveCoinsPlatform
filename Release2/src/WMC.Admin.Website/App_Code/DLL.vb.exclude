Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Data.SqlClient
Imports System.IO
Imports System.Data
Imports System.Configuration.ConfigurationManager
Imports Microsoft.Win32
Imports System.IO.Compression
Imports System.Net
Imports System.Net.Mail
Imports Paylike.NET
Imports Paylike.NET.RequestModels.Transactions
Imports Newtonsoft.Json

Namespace DLL
    Public Module DLL

        ''' <summary>
        ''' Executes an Order based on a RiskScore value between 0 and 1.
        ''' There are four outcomes: 1) KYC Decline, 2) TxSecret Request, 3) ´Manual Compliance Review, 4) Auto Payout
        ''' RiskScore value is calulated in TrustLevelCalculation()
        ''' NOTE: Emails functionality shall utilize the functionality implemented in the App
        ''' </summary>
        ''' <param name="OrderId"></param>
        ''' <param name="ActualOrderStatus"></param> 'This makes sure that we only execute if Order is in the status we expects
        ''' <param name="RiskScore"></param> ' Input value
        ''' <returns></returns> Returns True/False based on a successfull execution. Noy really used though
        ''' <remarks></remarks>
        Function TrustCalculationExecution(ByVal OrderId As Integer, ByVal ActualOrderStatus As String, ByVal RiskScore As Decimal) As Boolean
            Dim status As Integer = 0
            Dim result As Boolean = True
            Dim message As String
            If IsOrderStatus(ActualOrderStatus, OrderId) Then
                If RiskScore = 0 Then

                    Dim s As Integer = eQuote.ExecuteScalar("SELECT Id FROM OrderStatus WHERE Text = N'KYC Decline'")
                    eQuote.ExecuteNonQuery("UPDATE [Order] SET RiskScore = " + RiskScore.ToString.Replace(",", ".") + ", Status = " + s.ToString + " WHERE (Id = " + OrderId.ToString + ")")

                ElseIf RiskScore > 0 And RiskScore < 0.20000000000000001 Then

                    Dim dr As SqlDataReader = eQuote.GetDataReader("SELECT TOP (1) [Order].Id, [Order].Number, [User].Fname, [Order].Amount, Currency.Code, [Order].Quoted, [Order].CryptoAddress, [Order].Name, [Order].Email, [Order].IP,  OrderStatus.Text AS Status, [Order].Note, [Order].Rate, [Order].CommissionProcent, [Order].CardNumber, [Order].SiteId, SUBSTRING([Order].CountryCode, 1, 5) AS BrowserCulture, [Order].TxSecret FROM Currency INNER JOIN [Order] ON Currency.Id = [Order].CurrencyId INNER JOIN OrderStatus ON [Order].Status = OrderStatus.Id INNER JOIN [User] ON [Order].UserId = [User].Id INNER JOIN [Order] AS Order_1 ON [User].Id = Order_1.UserId WHERE ([Order].Status = 11 OR [Order].Status = 17 OR [Order].Status = 21 OR [Order].Status = 22) AND (Order_1.Id = " + OrderId.ToString + ") AND (NOT ([Order].TxSecret IS NULL)) AND (NOT ([Order].CardNumber IS NULL)) ORDER BY [Order].Quoted")
                    If dr.HasRows Then
                        dr.Read()
                        Dim ex As Exception = SendEmail("RequestTxSecret.htm", dr!SiteId, dr!Name, dr!Email, "CREDIT CARD VERIFICATION OF ORDER #" + dr!Number, dr!Number, String.Format("{0:d/M/yyyy}", dr!Quoted), String.Format("{0:n0}", dr!Amount) + " " + dr!Code, dr!CardNumber)
                        status = eQuote.ExecuteScalar("SELECT Id FROM AuditTrailStatus WHERE Text = N'SentEmail'")
                        message = "RequestTxSecret.htm" + vbCrLf + "Number:" + dr!Number + ", TxSecret:" + dr!TxSecret
                        eQuote.ExecuteNonQuery("INSERT INTO AuditTrail(OrderId, Status, Message, Created) VALUES (" + OrderId.ToString + ", " + status.ToString + ", N'" + message + "', { fn NOW() })")
                        status = eQuote.ExecuteScalar("SELECT Id FROM OrderStatus WHERE Text = N'Customer Response Pending'")
                        eQuote.ExecuteNonQuery("UPDATE [Order] SET RiskScore = " + RiskScore.ToString.Replace(",", ".") + ", Status = " + status.ToString + " WHERE (Id = " + OrderId.ToString + ")")
                        AddNote(OrderId, " Tx-Secret Requested:" + dr!TxSecret)

                    Else

                        AddNote(OrderId, " NOT SUCCESSFULL Tx-Secret Request")
                        result = False

                    End If
                    dr.Close()

                ElseIf RiskScore >= 0.20000000000000001 And RiskScore < 0.90000000000000002 Then

                    Dim dr As SqlDataReader = eQuote.GetDataReader("SELECT [Order].Id, [Order].Number, [Order].SiteId, [Order].Amount, Currency.Code, [Order].Quoted, [Order].Name, [Order].Email, [Order].CardNumber, [Order].TxSecret FROM Currency INNER JOIN [Order] ON Currency.Id = [Order].CurrencyId INNER JOIN [User] ON [Order].UserId = [User].Id WHERE [Order].Id =" + OrderId.ToString)
                    If dr.HasRows Then
                        If dr.HasRows Then
                            dr.Read()
                            If eQuote.ExecuteScalar("SELECT ConfigValue FROM AppSettings WHERE ConfigKey = 'OperationalStatus'") = "Away" Then
                                SendEmail("OrderComplianceInspection.htm", dr!SiteId, dr!Name, dr!Email, "YOUR ORDER #" + dr!Number + " WILL BE EVALUATED BY OUR COMPLIANCE DEPARTMENT", dr!Number)
                            End If
                            status = eQuote.ExecuteScalar("SELECT Id FROM OrderStatus WHERE Text = N'Compliance Officer Approval'")
                            eQuote.ExecuteNonQuery("UPDATE [Order] SET RiskScore = " + RiskScore.ToString.Replace(",", ".") + ", Status = " + status.ToString + " WHERE (Id = " + OrderId.ToString + ")")
                        Else
                            AddNote(OrderId, " NOT SUCCESSFULL OrderComplianceInspection Notification")
                            result = False
                        End If
                    End If
                    dr.Close()

                ElseIf RiskScore >= 0.90000000000000002 Then

                    Dim s As Integer = eQuote.ExecuteScalar("SELECT Id FROM OrderStatus WHERE Text = N'Payout approved'")
                    eQuote.ExecuteNonQuery("UPDATE [Order] SET RiskScore = " + RiskScore.ToString.Replace(",", ".") + ", Approved = { fn NOW() }, Status = " + s.ToString + " WHERE (Id = " + OrderId.ToString + ")")

                End If
            End If

            Return result
        End Function


        ''' <summary>
        ''' Base on different Order-variables, this functions calculates a RiskScore
        ''' </summary>
        ''' <param name="OrderId"></param>
        ''' <param name="TrustMessage"></param> A readable message-string if constructed and set to te passing parameter 
        ''' <returns></returns> RiskScore Value
        ''' <remarks></remarks>
        Function TrustLevelCalculation(ByVal OrderId As Integer, Optional ByRef TrustMessage As String = "") As Decimal
            Dim UserIsTrusted As Boolean = IsUserTrusted(OrderId)
            Dim CardNumber As String = eQuote.ExecuteScalar("SELECT CardNumber FROM [Order] WHERE Id =" + OrderId.ToString).ToString.Trim
            Dim CardIsApproved As Boolean = IsCardApproved(OrderId)
            Dim PhoneIsVirtual As Boolean = IsPhoneVitual(OrderId)
            Dim CardUsedElsewhere As Integer = GetCardUsedElsewhere(OrderId)
            Dim EmailUsedElsewhere As Integer = GetEmailUsedElsewhere(OrderId)
            Dim IpUsedElsewhere As Integer = GetIpUsedElsewhere(OrderId)
            Dim CountryTrust As String = GetCountryTrustLevel(OrderId)
            Dim SiteTrust As String = GetSiteTrustLevel(OrderId)
            Dim PhoneCountry As String = GetPhoneCountry(OrderId)
            Dim TxLimitEUR As Integer = CInt(eQuote.ExecuteScalar("SELECT ConfigValue FROM AppSettings WHERE ConfigKey = 'TxLimitEUR'"))
            Dim OrderSumEUR As Decimal = GetOrderSumEUR(OrderId)
            Dim OrderSumTotalEUR As Decimal = GetOrderSumTotalEUR(OrderId, CardNumber)
            Dim status As Integer = 0
            Dim RiskScore As Decimal = 0

            If IsCardUS(OrderId) Then
                'KYC DECLINE(24)
                TrustMessage = "Decline - US Card"
                RiskScore = 0

            Else
                If (Not CardIsApproved And ((OrderSumEUR + OrderSumTotalEUR) > TxLimitEUR * CountryTrust * SiteTrust)) Then
                    'TX SECRET -> CUSTOMER RESPONSE PENDING(22)
                    If PhoneCountry = "DK" Then

                        TrustMessage = "(DK) Manual Approval: Tx Limit is Exceeded "
                        RiskScore = 0.20000000000000001

                    Else

                        RiskScore = 0.10000000000000001
                        TrustMessage = "Ask for Tx Secret"

                    End If
                Else
                    If PhoneIsVirtual Or (CardUsedElsewhere > 0 Or EmailUsedElsewhere > 0 Or IpUsedElsewhere > 0) Or (Not PhoneCardOrigin_Match(OrderId)) Or (Not PhoneIP_Match(OrderId)) Then
                        If PhoneIsVirtual Then TrustMessage += "Virtual Number, "
                        If (CardUsedElsewhere > 0 Or EmailUsedElsewhere > 0 Or IpUsedElsewhere > 0) Then TrustMessage += "Data Used Elsewhere, "
                        If Not PhoneCardOrigin_Match(OrderId) Then TrustMessage += "Phone/Card Mismatch, "
                        If Not PhoneIP_Match(OrderId) Then TrustMessage += "  - Phone/IP Mismatch, "
                        If UserIsTrusted Then

                            'PAYOUT APPROVED(18)
                            TrustMessage = "Approved although:" + TrustMessage
                            RiskScore = 0.90000000000000002

                        Else

                            'COMPLIANCE OFFICER APPROVAL(21)
                            TrustMessage = "Manual Approval: " + TrustMessage
                            RiskScore = 0.20000000000000001

                        End If
                    Else

                        'PAYOUT APPROVED(18)
                        TrustMessage = "Approved"
                        RiskScore = 1

                    End If
                End If
            End If

            Return RiskScore
        End Function

        ''' <summary>
        ''' Bellow find "helping functions"
        ''' </summary>
        ''' <param name="OrderId"></param>
        ''' <param name="c"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>

        Function IsCardApproved(OrderId As Integer, Optional ByRef c As Label = Nothing) As Boolean
            Dim CardNumber As Object = eQuote.ExecuteScalar("SELECT CardNumber FROM [Order] WHERE Id =" + OrderId.ToString)
            If IsDBNull(CardNumber) Then Return False
            Dim n As Integer = eQuote.ExecuteScalar("SELECT COUNT(*) FROM [Order] WHERE CardNumber = N'" + CardNumber.ToString + "' AND NOT (CardApproved IS NULL)")
            If n = 0 Then
                Return False
            Else
                If Not IsNothing(c) Then c.BackColor = Drawing.Color.FromName("#66FF66")
                Return True
            End If
        End Function

        Function GetCountryTrustLevel(OrderId As Integer) As Decimal
            Dim CountryCode As String = GetPhoneCountry(OrderId)
            Return eQuote.ExecuteScalar("SELECT TrustValue FROM Country WHERE Code = N'" + CountryCode + "'")
        End Function

        Function GetSiteTrustLevel(OrderId As Integer) As Decimal
            Dim SiteId As Integer = eQuote.ExecuteScalar("SELECT SiteId FROM [Order] WHERE Id = " + OrderId.ToString)
            If SiteId = 1 Then Return 0.80000000000000004 Else Return 1
        End Function

        Function IsPhoneVitual(OrderId As Integer, Optional ByRef c As Label = Nothing) As Boolean
            Dim names As Integer = GetDifferentNameUser(OrderId)
            Dim emails As Integer = GetDifferentEmailUser(OrderId)
            If (names > 1 And emails > 1) Or names > 2 Or emails > 2 Then
                If Not IsNothing(c) Then c.BackColor = Drawing.Color.FromName("#FFFF66")
                Return True
            Else
                Return False
            End If
        End Function

        Function PhoneCardOrigin_Match(OrderId As Integer) As Boolean
            If GetPhoneCountry(OrderId) = GetCardCountry(OrderId) Then Return True Else Return False
        End Function

        Function PhoneIP_Match(OrderId As Integer) As Boolean
            If GetPhoneCountry(OrderId) = GetIpCountry(OrderId) Then Return True Else Return False
        End Function

        Function GetCardUsedElsewhere(OrderId As Integer, Optional ByRef c As LinkButton = Nothing) As Integer
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            Dim dr As SqlDataReader = eQuote.GetDataReader("SELECT [Transaction].Info, [Order].UserId, [User].Phone, [Order].CardNumber, [Order].CountryCode, [Order].Amount, [Order].CurrencyId, AuditTrail.Message AS Phone_Message, AuditTrail_1.Message AS IP_Message, [Order].CryptoAddress, [User].Email, [Order].IP  FROM [Order] INNER JOIN [Transaction] ON [Order].Id = [Transaction].OrderId INNER JOIN [User] ON [Order].UserId = [User].Id INNER JOIN AuditTrail ON [Order].Id = AuditTrail.OrderId INNER JOIN AuditTrail AS AuditTrail_1 ON [Order].Id = AuditTrail_1.OrderId WHERE ([Order].Id = " + OrderId.ToString + ") AND ([Transaction].Type = 1) AND (AuditTrail.Status = 3) AND (AuditTrail_1.Status = 4)")
            Dim n As Integer
            If dr.HasRows Then
                dr.Read()
                Try
                    n = eQuote.ExecuteScalar("SELECT COUNT(*) FROM [Order] WHERE  (NOT (UserId = " + UserId.ToString + ")) AND (CardNumber = N'" + dr!CardNumber + "')").ToString
                    If Not IsNothing(c) Then
                        c.CommandArgument = dr!CardNumber
                        If n > 0 Then c.BackColor = Drawing.Color.FromName("#FFFF66")
                    End If
                Catch ex As Exception
                    n = -1
                End Try
            End If
            dr.Close()
            Return n
        End Function

        Function GetEmailUsedElsewhere(OrderId As Integer, Optional ByRef c As LinkButton = Nothing) As Integer
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            Dim dr As SqlDataReader = eQuote.GetDataReader("SELECT [Transaction].Info, [Order].UserId, [User].Phone, [Order].CardNumber, [Order].CountryCode, [Order].Amount, [Order].CurrencyId, AuditTrail.Message AS Phone_Message, AuditTrail_1.Message AS IP_Message, [Order].CryptoAddress, [User].Email, [Order].IP  FROM [Order] INNER JOIN [Transaction] ON [Order].Id = [Transaction].OrderId INNER JOIN [User] ON [Order].UserId = [User].Id INNER JOIN AuditTrail ON [Order].Id = AuditTrail.OrderId INNER JOIN AuditTrail AS AuditTrail_1 ON [Order].Id = AuditTrail_1.OrderId WHERE ([Order].Id = " + OrderId.ToString + ") AND ([Transaction].Type = 1) AND (AuditTrail.Status = 3) AND (AuditTrail_1.Status = 4)")
            Dim n As Integer
            If dr.HasRows Then
                dr.Read()
                Try
                    n = eQuote.ExecuteScalar("SELECT COUNT(*) FROM [Order] WHERE  (NOT (UserId = " + UserId.ToString + ")) AND (Email = N'" + dr!Email + "')").ToString
                    If Not IsNothing(c) Then
                        c.CommandArgument = dr!Email
                        If n > 1 Then c.BackColor = Drawing.Color.FromName("#FFFF66")
                    End If
                Catch ex As Exception
                    n = -1
                End Try
            End If
            dr.Close()
            Return n
        End Function

        Function GetIpUsedElsewhere(OrderId As Integer, Optional ByRef c As LinkButton = Nothing) As Integer
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            Dim dr As SqlDataReader = eQuote.GetDataReader("SELECT [Transaction].Info, [Order].UserId, [User].Phone, [Order].CardNumber, [Order].CountryCode, [Order].Amount, [Order].CurrencyId, AuditTrail.Message AS Phone_Message, AuditTrail_1.Message AS IP_Message, [Order].CryptoAddress, [User].Email, [Order].IP  FROM [Order] INNER JOIN [Transaction] ON [Order].Id = [Transaction].OrderId INNER JOIN [User] ON [Order].UserId = [User].Id INNER JOIN AuditTrail ON [Order].Id = AuditTrail.OrderId INNER JOIN AuditTrail AS AuditTrail_1 ON [Order].Id = AuditTrail_1.OrderId WHERE ([Order].Id = " + OrderId.ToString + ") AND ([Transaction].Type = 1) AND (AuditTrail.Status = 3) AND (AuditTrail_1.Status = 4)")
            Dim n As Integer
            If dr.HasRows Then
                dr.Read()
                Try
                    n = eQuote.ExecuteScalar("SELECT COUNT(*) FROM [Order] WHERE  (NOT (UserId = " + UserId.ToString + ")) AND (IP = N'" + dr!IP + "')").ToString
                    If Not IsNothing(c) Then
                        If n > 1 Then c.BackColor = Drawing.Color.FromName("#FFFF66")
                        c.CommandArgument = dr!IP
                    End If
                Catch ex As Exception
                    n = -1
                End Try
            End If
            dr.Close()
            Return n
        End Function

        Function IsCardUS(OrderId As Integer, Optional ByRef c As Label = Nothing) As Boolean
            If GetCardCountry(OrderId) = "US" Then
                Return True
                If Not IsNothing(c) Then c.BackColor = Drawing.Color.FromName("#FFA8C5")
            Else
                Return False
            End If
        End Function

        Function GetOrderSumEUR(OrderId As Integer) As Decimal
            Dim AmountEUR As Decimal
            Try
                AmountEUR = eQuote.ExecuteScalar("SELECT Amount / RateHome AS AmountEUR FROM [Order] WHERE Id = " + OrderId.ToString)
            Catch ex As Exception
                Dim CurrencyCode As String = eQuote.ExecuteScalar("SELECT Currency.Code FROM [Order] INNER JOIN Currency ON [Order].CurrencyId = Currency.Id WHERE [Order].Id = " + OrderId.ToString)
                Dim LocalAmount As Decimal = eQuote.ExecuteScalar("SELECT Amount FROM [Order] WHERE Id = " + OrderId.ToString)
                Select Case CurrencyCode
                    Case "DKK"
                        AmountEUR = LocalAmount / 7.4400000000000004
                    Case "GBP"
                        AmountEUR = LocalAmount / 0.85282899999999995
                    Case "INR"
                        AmountEUR = LocalAmount / 72.760000000000005
                    Case "SEK"
                        AmountEUR = LocalAmount / 9.4499999999999993
                    Case "EUR"
                        AmountEUR = LocalAmount
                End Select
            End Try
            Return AmountEUR
        End Function

        Function GetOrderSumTotalEUR(OrderId As Integer, Optional CardNumber As String = "") As Decimal
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            Dim AmountEUR As Decimal
            Dim WhereCard As String = ""
            If CardNumber.Length > 0 Then WhereCard = " AND CardNumber = N'" + CardNumber + "'"
            Try
                AmountEUR = eQuote.ExecuteScalar("SELECT SUM([Order].Amount / [Order].RateHome) AS AmountEUR FROM [Order] INNER JOIN [Transaction] ON [Order].Id = [Transaction].OrderId INNER JOIN TransactionType  ON TransactionType.Id = [Transaction].Type INNER JOIN OrderStatus ON [Order].Status = OrderStatus.Id WHERE  (NOT ([Transaction].Completed IS NULL)) AND ([Transaction].Type = 1) AND (NOT ([Order].Amount / [Order].RateHome IS NULL)) AND (NOT (OrderStatus.Text = N'Completed')) AND [Order].UserId = " + UserId.ToString + WhereCard)
            Catch ex As Exception
                AmountEUR = 0
            End Try
            Return AmountEUR
        End Function

        Function IsUserTrusted(ByVal OrderId As Integer, Optional ByRef c As Label = Nothing) As Boolean
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            If IsDBNull(eQuote.ExecuteScalar("SELECT Trusted FROM [User] WHERE Id = " + UserId.ToString)) Then
                Return False
            Else
                If Not IsNothing(c) Then c.BackColor = Drawing.Color.FromName("#66FF66")
                Return True
            End If            '
        End Function

        Function GetDifferentNameUser(OrderId As Integer, Optional ByRef c As Label = Nothing) As Integer
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            Try
                Dim n As Integer = eQuote.ExecuteScalar("SELECT COUNT(DISTINCT Name) FROM [Order] WHERE UserId = " + UserId.ToString)
                If Not IsNothing(c) Then
                    If n > 1 And n < 3 Then c.BackColor = Drawing.Color.FromName("#FFFF66")
                    If n > 2 Then c.BackColor = Drawing.Color.FromName("#FFA8C5")
                End If
                Return n - 1
            Catch ex As Exception
                Return -1
            End Try
        End Function

        Function GetDifferentEmailUser(OrderId As Integer, Optional ByRef c As Label = Nothing) As Integer
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            Try
                Dim n As Integer = eQuote.ExecuteScalar("SELECT COUNT(DISTINCT Email) FROM [Order] WHERE UserId = " + UserId.ToString)
                If Not IsNothing(c) Then
                    If n > 1 And n < 4 Then c.BackColor = Drawing.Color.FromName("#FFFF66")
                    If n > 3 Then c.BackColor = Drawing.Color.FromName("#FFA8C5")
                End If
                Return n - 1
            Catch ex As Exception
                Return -1
            End Try
        End Function

        Function IsKycApproved(ByVal OrderId As Integer, Optional ByRef c As Label = Nothing) As Boolean
            Dim UserId As Integer = eQuote.ExecuteScalar("SELECT UserId FROM  [Order] WHERE Id=" + OrderId.ToString)
            Dim nApproved As Integer = eQuote.ExecuteScalar("SELECT COUNT(*) FROM KycFile INNER JOIN KycType ON KycFile.Type = KycType.Id WHERE NOT (Approved IS NULL) AND UserId = " + UserId.ToString + " AND (KycType.Text = N'ProofOfRecidency' OR KycType.Text = N'PhotoID') ")
            Dim nTotal As Integer = eQuote.ExecuteScalar("SELECT COUNT(*)FROM KycFile INNER JOIN KycType ON KycFile.Type = KycType.Id WHERE (KycType.Text = N'ProofOfRecidency' OR KycType.Text = N'PhotoID') AND UserId = " + UserId.ToString)
            If nApproved > 0 Then
                If nTotal > nApproved Then
                    Return False
                Else
                    If Not IsNothing(c) Then c.BackColor = Drawing.Color.FromName("#66FF66")
                    Return True
                End If
            Else
                Return False
            End If            '
        End Function

        Function GetPhoneCountry(OrderId As Integer) As String
            Dim phoneCode As String = eQuote.ExecuteScalar("SELECT Country.Code FROM Country INNER JOIN [User] ON Country.Id = [User].CountryId INNER JOIN [Order] ON [User].Id = [Order].UserId WHERE [Order].Id = " + OrderId.ToString)
            Return phoneCode
        End Function

        Function GetCardCountry(OrderId As Integer) As String
            Dim Result As Object = eQuote.ExecuteScalar("SELECT [Transaction].Info FROM [Order] INNER JOIN [Transaction] ON [Order].Id = [Transaction].OrderId INNER JOIN [User] ON [Order].UserId = [User].Id INNER JOIN AuditTrail ON [Order].Id = AuditTrail.OrderId INNER JOIN AuditTrail AS AuditTrail_1 ON [Order].Id = AuditTrail_1.OrderId WHERE ([Order].Id = " + OrderId.ToString + ") AND ([Transaction].Type = 1) AND (AuditTrail.Status = 3) AND (AuditTrail_1.Status = 4)")
            If IsDBNull(Result) Or IsNothing(Result) Then Return "?"
            Dim bin As String = Result.ToString.Replace(" ", "").Substring(0, 6)
            Dim wrGETURL As WebRequest
            wrGETURL = WebRequest.Create("https://lookup.binlist.net/" + bin)
            Dim objStream As Stream
            Try
                wrGETURL.Timeout = 1000
                objStream = wrGETURL.GetResponse.GetResponseStream()
                Dim objReader As New StreamReader(objStream)
                Dim s1 As String
                s1 = objReader.ReadLine.ToString
                s1 = s1.Substring(s1.IndexOf("alpha2") + 9, 2)
                Return s1
            Catch ex As Exception
                Return "?"
            End Try
        End Function

        Function GetIpCountry(OrderId As Integer) As String
            Dim ip As Object = eQuote.ExecuteScalar("SELECT IpCode FROM [Order] WHERE [Order].Id = " + OrderId.ToString)
            If IsDBNull(ip) Then
                Return "?"
            Else
                Return ip.ToString
            End If
        End Function

        Sub AddNote(OrderId As Integer, note As String)
            Dim GetMemoLogScript As String = String.Format(" {0:d}", Date.Now) + " at " + String.Format(" {0:t}", Date.Now) + note + "<br />"
            eQuote.ExecuteNonQuery("UPDATE [Order] SET Note = { fn CONCAT('" + Replace(GetMemoLogScript, Environment.NewLine, "<br/>") + "', { fn IFNULL(Note, '') }) } WHERE  Id = " + OrderId.ToString)
        End Sub

        Function IsOrderStatus(ByVal s As String, ByVal id As Integer) As Boolean
            If s = eQuote.ExecuteScalar("SELECT OrderStatus.Text FROM [Order] INNER JOIN OrderStatus ON [Order].Status = OrderStatus.Id WHERE [Order].Id =" + id.ToString) Then
                Return True
            Else
                Return False
            End If
        End Function

        Public Function SendEmail(ByVal Template As String, ByVal SiteId As String, ByVal RecieverName As String, ByVal RecieverEmail As String, ByVal Subject As String, ByVal Number As String, Optional ByVal Quoted As String = "", Optional ByVal Amount As String = "", Optional ByVal CC As String = "") As Exception
            Dim SiteName As String() = eQuote.ExecuteScalar("SELECT Text FROM Site WHERE Id = " + SiteId.ToString).ToString.Split(New Char() {"."c})

            Dim SR As New StreamReader(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "EmailTemplate/" + SiteName(1) + "/" + Template), Encoding.Default)
            Dim strBodyText As String = SR.ReadToEnd()

            Dim SMTP As New SmtpClient
            Dim Message As New MailMessage

            SMTP.UseDefaultCredentials = False
            'SMTP.Credentials = New System.Net.NetworkCredential(AppSettings("SMTP.UserId"), AppSettings("SMTP.Password"))
            If SiteId = "1" Then
                SMTP.Credentials = New System.Net.NetworkCredential("support@wemovecoins.com", "krnNpz7hFDlxARGF")
                SMTP.Port = "587"
                SMTP.Host = "asmtp.unoeuro.com"
                Message.From = New System.Net.Mail.MailAddress("support@wemovecoins.com")
            ElseIf SiteId = "2" Then
                SMTP.Credentials = New System.Net.NetworkCredential("support@123bitcoin.dk", "sdZwtFc1Xe")
                SMTP.Port = "587"
                SMTP.Host = "asmtp.unoeuro.com"
                Message.From = New System.Net.Mail.MailAddress("support@123bitcoin.dk")
            ElseIf SiteId = "15" Then
                SMTP.Credentials = New System.Net.NetworkCredential("service@simplekoin.com", "45EffGt6HJk8$3&2fHb")
                SMTP.Port = "587"
                SMTP.Host = "mail.secureemail.com"
                Message.From = New System.Net.Mail.MailAddress("service@simplekoin.com")
            ElseIf SiteId = "16" Then
                SMTP.Credentials = New System.Net.NetworkCredential("service@mycoins.fr", "M27jR3Pd6")
                SMTP.Port = "587"
                SMTP.Host = "asmtp.unoeuro.com"
                Message.From = New System.Net.Mail.MailAddress("service@mycoins.fr")
            ElseIf SiteId = "17" Then
                SMTP.Credentials = New System.Net.NetworkCredential("support@wemovecoins.com", "krnNpz7hFDlxARGF")
                SMTP.Port = "587"
                SMTP.Host = "asmtp.unoeuro.com"
                Message.From = New System.Net.Mail.MailAddress("support@wemovecoins.com")
            End If

            SMTP.DeliveryMethod = SmtpDeliveryMethod.Network

            strBodyText = strBodyText.Replace("{{UserFirstName}}", RecieverName)
            strBodyText = strBodyText.Replace("{{OrderNumber}}", Number)
            strBodyText = strBodyText.Replace("{{OrderCompleted}}", Quoted)
            strBodyText = strBodyText.Replace("{{OrderAmount}}", Amount)
            strBodyText = strBodyText.Replace("{{CreditCard}}", CC)

            Try
                With Message
                    '.From = New System.Net.Mail.MailAddress(AppSettings("SMTP.UserId"))
                    .To.Add(RecieverEmail)
                    .Bcc.Add("bcc@mailwmc.com")
                    .Subject = Subject
                    .IsBodyHtml = True
                    .Body = strBodyText
                End With

                SMTP.Send(Message)
            Catch ex As Exception
                Return ex
                Exit Function
            End Try
            Return Nothing
        End Function
    End Module
End Namespace
